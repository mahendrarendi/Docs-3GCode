{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Docs 3G Code","text":"<p>Welcome to Docs 3GCode.</p>"},{"location":"pages/about/","title":"Tentang Himafortic","text":"<p>Himafortic adalah Himpunan Mahasiswa Program Studi D4 Manajemen Informatika di Universitas Negeri Surabaya. Kami berdedikasi untuk memperkuat keterampilan dan pengetahuan mahasiswa dalam bidang teknologi informasi dan manajemen.</p>"},{"location":"pages/about/#deskripsi","title":"Deskripsi","text":"<p>Himafortic didirikan pada tahun 2010 dan telah berkembang menjadi salah satu organisasi mahasiswa terkemuka di Universitas Negeri Surabaya. Kami memiliki anggota yang terdiri dari mahasiswa D4 Manajemen Informatika yang memiliki minat dan potensi dalam pengembangan perangkat lunak, desain web, jaringan komputer, dan manajemen teknologi informasi.</p>"},{"location":"pages/about/#sosial-media","title":"Sosial Media","text":"<p>Untuk tetap terhubung dengan kami, silakan ikuti akun sosial media kami:</p> <ul> <li>Instagram: @himafortic_unesa</li> <li>YouTube: Himafortic Unesa</li> </ul> <p>Terima kasih telah mengunjungi halaman kami! Jangan ragu untuk menghubungi kami jika Anda memiliki pertanyaan atau ingin bergabung dengan kami.</p>"},{"location":"pages/JavaScript/dasarjs/","title":"Dasar JavaScript","text":"<p>JavaScript adalah bahasa pemrograman yang digunakan untuk mengembangkan aplikasi web dan membuat website lebih interaktif. JavaScript dikembangkan oleh Brendan Eich pada tahun 1995 ketika ia bekerja di Netscape Communications Corporation.</p>"},{"location":"pages/JavaScript/dasarjs/#sejarah","title":"Sejarah","text":"<p>Sebelum JavaScript, pengembangan aplikasi web dilakukan menggunakan bahasa pemrograman seperti Perl dan CGI. Namun, pada tahun 1995, Netscape Communications Corporation merilis browser web Navigator versi 2.0 yang memungkinkan pengembang web menambahkan skrip yang dieksekusi pada sisi klien (client-side) browser. Skrip ini dikenal sebagai LiveScript. Namun, karena popularitas bahasa pemrograman Java pada saat itu, LiveScript kemudian diganti namanya menjadi JavaScript.</p> <p>JavaScript kemudian menjadi populer pada akhir tahun 1990-an ketika browser web mulai mendukung teknologi yang memungkinkan pengembang untuk membuat aplikasi web yang lebih interaktif dan responsif. Pada tahun 1997, JavaScript disetujui sebagai standar ECMA (European Computer Manufacturers Association) dan dikenal sebagai ECMAScript.</p>"},{"location":"pages/JavaScript/dasarjs/#pengertian","title":"Pengertian","text":"<p>JavaScript adalah bahasa pemrograman tingkat tinggi, berorientasi objek, dan berbasis skrip. JavaScript sering digunakan untuk membuat efek-efek visual pada website, validasi formulir, menangani interaksi pengguna, dan banyak lagi. Selain itu, JavaScript juga dapat digunakan pada sisi server (server-side) menggunakan teknologi seperti Node.js.</p> <p>JavaScript memiliki sintaks yang mirip dengan bahasa pemrograman C, sehingga cukup mudah dipelajari bagi mereka yang sudah familiar dengan bahasa pemrograman tersebut.</p>"},{"location":"pages/JavaScript/dasarjs/#penemu","title":"Penemu","text":"<p>Brendan Eich adalah penemu JavaScript. Pada saat itu, ia bekerja di Netscape Communications Corporation dan ditugaskan untuk membuat bahasa pemrograman yang dapat dieksekusi pada sisi klien browser. Brendan Eich kemudian mengembangkan bahasa pemrograman LiveScript yang kemudian diubah namanya menjadi JavaScript.</p>"},{"location":"pages/JavaScript/fungsi/","title":"Fungsi pada JavaScript","text":"<p>Fungsi pada JavaScript adalah sebuah blok kode yang bisa digunakan kembali (reusable) yang melakukan tugas tertentu. Fungsi pada JavaScript sangat penting karena memungkinkan kita untuk mengorganisasi kode dan membuatnya lebih mudah dipahami, serta mengurangi duplikasi kode.</p>"},{"location":"pages/JavaScript/fungsi/#mendefinisikan-fungsi","title":"Mendefinisikan Fungsi","text":"<p>Anda bisa mendefinisikan sebuah fungsi pada JavaScript dengan menggunakan kata kunci <code>function</code> diikuti dengan nama fungsi dan parameter (jika ada), kemudian diikuti dengan blok kode yang akan dijalankan ketika fungsi tersebut dipanggil.</p> <p>Contoh:  <pre><code>function tambah(a, b) {\n  return a + b;\n}\n</code></pre> Di contoh di atas, <code>tambah</code> adalah nama fungsi, dan <code>a</code> dan <code>b</code> adalah parameter yang akan digunakan oleh fungsi tersebut. Blok kode yang dijalankan oleh fungsi adalah <code>return a + b</code>, yang akan mengembalikan hasil penjumlahan dari <code>a</code> dan <code>b</code>.</p>"},{"location":"pages/JavaScript/fungsi/#memanggil-fungsi","title":"Memanggil Fungsi","text":"<p>Untuk memanggil sebuah fungsi, cukup tuliskan nama fungsi diikuti dengan tanda kurung <code>()</code> dan argumen (jika ada) di dalam tanda kurung tersebut.</p> <p>Contoh: <pre><code>let hasil = tambah(3, 4);\nconsole.log(hasil); // output: 7\n</code></pre> Di contoh di atas, kita memanggil fungsi <code>tambah</code> dengan mengirimkan nilai <code>3</code> dan <code>4</code> sebagai argumen. Hasil dari penjumlahan tersebut kemudian disimpan di dalam variabel <code>hasil</code>, yang kemudian di-print ke console.</p>"},{"location":"pages/JavaScript/fungsi/#fungsi-tanpa-parameter","title":"Fungsi Tanpa Parameter","text":"<p>Fungsi pada JavaScript juga bisa didefinisikan tanpa parameter. Dalam hal ini, tanda kurung <code>()</code> tetap harus dituliskan setelah nama fungsi.</p> <p>Contoh: <pre><code>function halo() {\n  console.log(\"Halo!\");\n}\n\nhalo(); // output: \"Halo!\"\n</code></pre> Di contoh di atas, fungsi <code>halo</code> didefinisikan tanpa parameter. Ketika fungsi tersebut dipanggil, blok kode di dalamnya akan dijalankan dan <code>\"Halo!\"</code> akan di-print ke console.</p>"},{"location":"pages/JavaScript/fungsi/#fungsi-tanpa-nilai-kembali-void","title":"Fungsi Tanpa Nilai Kembali (Void)","text":"<p>Fungsi pada JavaScript bisa saja tidak mengembalikan nilai apapun. Dalam hal ini, nilai kembali dari fungsi tersebut adalah <code>undefined</code>.</p> <p>Contoh: <pre><code>function sapa(nama) {\n  console.log(\"Halo, \" + nama + \"!\");\n}\n\nlet hasil = sapa(\"John\"); // output: \"Halo, John!\"\nconsole.log(hasil); // output: undefined\n</code></pre> Di contoh di atas, fungsi <code>sapa</code> hanya menge-print pesan ke console dan tidak mengembalikan nilai apapun. Ketika kita mencoba menyimpan hasil pemanggilan fungsi ke dalam variabel <code>hasil</code>, nilai dari variabel tersebut adalah <code>undefined</code>.</p>"},{"location":"pages/JavaScript/fungsi/#fungsi-anonim","title":"Fungsi Anonim","text":"<p>Selain mendefinisikan fungsi dengan nama, kita juga bisa mendefinisikan fungsi tanpa nama yang disebut fungsi anonim. Fungsi anonim biasanya digunakan sebagai argumen dari fungsi lain, atau disimpan di dalam variabel.</p> <p>Contoh: <pre><code>let jumlah = function(a, b) {\n  return a + b;\n};\n\nconsole.log(jumlah(2, 3)); // output\n</code></pre></p>"},{"location":"pages/JavaScript/variabel/","title":"Variabel","text":"<p>Variabel adalah tempat untuk menyimpan data dalam program. Setiap variabel memiliki nama yang unik dan nilai yang dapat berubah-ubah selama program berjalan. Nilai variabel dapat berupa angka, string, objek, dan tipe data lainnya.</p>"},{"location":"pages/JavaScript/variabel/#deklarasi-variabel","title":"Deklarasi Variabel","text":"<p>Bagaimana keywordi let, const, dan var Bekerja di JavaScript di era JavaScript pra-ES6 yang lama, pengembang biasa mendeklarasikan variabel menggunakan kata kunci <code>var</code> atau tanpa kata kunci apa pun.  Dengan ES6 (EcmaScript 2015), awal era modern dalam JavaScript, bahasa tersebut mendapatkan dua kata kunci baru untuk membantu kami mendeklarasikan variabel. Ini adalah <code>let</code> dan <code>const</code>.</p> <ul> <li>Cara Mendeklarasikan Variabel di JavaScript Dalam JavaScript, kita dapat mendeklarasikan variabel dengan tiga cara berbeda seperti ini, kita bisa menggunakan kata kunci <code>var</code>, <code>let</code>, atau <code>const.</code></li> </ul> <pre><code>// menggunakan var\nvar nama = \"John Doe\";\n\n// menggunakan let\nlet usia = 25;\n\n// menggunakan const\nconst PI = 3.14;\n</code></pre> <p>Ketiga kata kunci ini memiliki perbedaan dalam cara variabel tersebut bisa diubah dan diakses:</p> <ul> <li> <p><code>var</code>: variabel yang dideklarasikan dengan <code>var</code> bisa diakses dan diubah nilainya di mana saja di dalam fungsi tempat variabel tersebut dideklarasikan. Variabel yang dideklarasikan dengan <code>var</code> juga bisa diakses di luar blok tempat variabel tersebut dideklarasikan. Namun, jika variabel dideklarasikan di luar fungsi, variabel tersebut akan menjadi variabel global.</p> </li> <li> <p><code>let</code>: variabel yang dideklarasikan dengan <code>let</code> memiliki cakupan blok yang lebih ketat daripada variabel yang dideklarasikan dengan <code>var</code>. Variabel yang dideklarasikan dengan <code>let</code> hanya bisa diakses dan diubah nilainya di dalam blok tempat variabel tersebut dideklarasikan.</p> </li> <li> <p><code>const</code>: variabel yang dideklarasikan dengan <code>const</code> juga memiliki cakupan blok yang ketat seperti variabel yang dideklarasikan dengan <code>let</code>, tetapi nilainya tidak bisa diubah setelah dideklarasikan. Variabel yang dideklarasikan dengan <code>const</code>bersifat konstan dan nilainya tidak bisa diubah di dalam blok tempat variabel tersebut dideklarasikan.</p> </li> <li> <p>Urutan aksesibilitas dalam scope dimulai dari yang terendah :</p> <ul> <li><code>var</code> : The functional scope level</li> <li><code>let</code>: The block scope level</li> <li><code>const</code> : The block scope level</li> </ul> </li> </ul> <p>Gambar di bawah menunjukkan mindmap dari ketiga kata kunci ini dengan mengacu pada scope yang berbeda. </p>"}]}